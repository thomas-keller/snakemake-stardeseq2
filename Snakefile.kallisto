import json
import pandas as pd
from os.path import join, basename, dirname
from os import getcwd
from subprocess import check_output
import csv

# Globals ---------------------------------------------------------------------
configfile: "config.yml"



logdir = os.path.join(os.getcwd(), "logs/slurm")
os.makedirs(logdir, exist_ok=True)

# Functions -------------------------------------------------------------------

def rstrip(text, suffix):
    # Remove a suffix from a string.
    if not text.endswith(suffix):
        return text
    return text[:len(text)-len(suffix)]

# Rules -----------------------------------------------------------------------

samples = pd.read_table(config["samples"]).set_index("sample", drop=False)


units = pd.read_table(config["units"], dtype=str).set_index(["sample", "unit"], drop=False)
units.index = units.index.set_levels([i.astype(str) for i in units.index.levels]) # enforce str in index



rule all:
    input:
        expand("kallisto/{sample}/abundance.tsv",sample=samples['sample'].tolist()),
        "multiqc_kal.html",
        "dex_deseq_kal.csv"
        #expand(["results/diffexp/{contrast}/diffexpr.tsv",
        #		"results/diffexp/{contrast}/ma-plot.svg"]
        #		contrast=config["diffexp"]["contrasts"]),
        #		"results/pca.svg"


def get_fastq(wildcards):
    return units.loc[(wildcards.sample, wildcards.unit), ["fq1", "fq2"]].dropna()

rule trim_galore:
    input: 
        "{sample}_1.fastq","{sample}_2.fastq"
    output:
        fastq1="trimmed/{sample}_1_val_1.fq",
        fastq2="trimmed/{sample}_2_val_2.fq",
        qc1="trimmed/{sample}_1.fastq_trimming_report.txt",
        qc2="trimmed/{sample}_2.fastq_trimming_report.txt"
    log:    "logs/trim_galore/{sample}.fastqc"
    threads: 1
    params : jobname = "{sample}"
    message: "fastqc {input}: {threads}"
    shell:
        """
        trim_galore --paired -o trimmed/ {input[0]} {input[1]}  2> {log}
        """

rule kallisto_index:
    input:
        "/home/t/tekeller/toxo_kim/genomes/Homo_sapiens.GRCh38.cdna.all.fa"
    output:
        "kallisto/indices/GRC38.kaix"
    log: "logs/kallisto/index.log"
    shell:
        """
        module purge
        module add apps/kallisto/0.43.1
        kallisto index {input} -i {output} &> {log}
        """  

rule align_kallisto:
    input:
        "trimmed/{sample}_1_val_1.fq",
        "trimmed/{sample}_2_val_2.fq"
    output:
        "kallisto/{sample}/abundance.tsv",
    log: "logs/kallisto/{sample}.kallisto.log"

    shell:
        """
        module purge
        module add apps/kallisto/0.43.1
        kallisto quant --threads 12 --bias --bootstrap-samples=200 --plaintext -i kallisto/indices/GRC38.kaix -o kallisto/{wildcards.sample} {input[0]} {input[1]} &> {log}
        """

rule deseq_kal:
    input:
        expand("kallisto/{sample}/abundance.tsv", sample=samples['sample'].tolist())
    output:
        'dex_deseq_kal.csv'
    log: "logs/kallisto/deseq_kal.log"
    shell:
        """
        source deactivate
        module add apps/R
        Rscript deseq_kal.R {input} &> {log}
        """

rule multiqc:
    output:
        "multiqc_kal.html"
    log: "logs/multiqc/kal.log"
    shell:
        """
        multiqc -n multiqc_kal.html trimmed/ logs/kallisto/
        """
        
